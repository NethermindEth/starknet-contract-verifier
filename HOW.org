#+author: Jakub Kopa≈Ñski
#+title: Starknet contract verifier deep dive

* Argument validation
As an input program takes following parameters:

#+begin_src rust

struct Args {
    network: Network,
    path: ProjectDir,
    hash: ClassHash,
    name: String,
    license: Option<String>,
}

#+end_src

Arguments are passed from command line, checked and passed to the
=verify::verify_project= function.  Right now the tool doesn't support
verifying single file contracts, but there are some code left overs for
that case.

* Project verification
** Tools version check
Before anything we check for version compatibility by calling =scarb
--version=.  Although each branch supports only single cairo version.
The =enum= =SupportedCairoVersions= contains only 1 member.

** Resolving
Next step is to gather project information based on the =Scarb.toml=
file.  During this phase project is compiled using =scarb= dependency.
As far as I understand it uses =scarb= as library.  The =scarb-ui=
packages for it's terminal user interface seems to be unused.  That
functionality is wrapped in the =dyn_compiler= crate.

*** TODO Why do we compile project?
The comment says: /Compiler and extract the necessary files/.  What are
the necessary files?

* Class hash existence
Before submitting verification job we check if class hash exists in the network, by
calling =does_class_hash_exist=.

* Verification
If the class hash exist the data gathered during resolve is sent to
Voyager for verification.

** TODO What happens server-side?
As for as I understand, project is compiled similarly on the server.
That is the process is delegated to the =scarb= and resulting hash is
compared.

** TODO Server API docs
This one: [[https://docs.voyager.online/][Voyager API]]?

** TODO Public and Private API?

** TODO Verification time
How long does it usually take for contract to be verified?  I've yet
to verify one successfully.  I think it makes sense to split into
submission and checking steps.
