name: Crates.io Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

jobs:
  test:
    name: Run tests
    uses: ./.github/workflows/test.yml
    with:
      ref: ${{ inputs.tag || github.ref }}
      fail-fast: true

  build_binaries:
    needs: test
    name: Build release binaries
    uses: ./.github/workflows/release.yml
    with:
      tag: ${{ inputs.tag || github.ref_name }}

  publish_crate:
    needs: [test, build_binaries]
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ inputs.tag }}"
            VERSION="${TAG#v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Tag: $TAG"
            echo "Version: $VERSION"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Version: $VERSION"
          fi
        
      - name: Verify version in Cargo.toml
        run: |
          CARGO_VERSION=$(grep -m 1 'version =' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Release version: ${{ steps.get_version.outputs.version }}"
          if [ "$CARGO_VERSION" != "${{ steps.get_version.outputs.version }}" ]; then
            echo "Error: Version in Cargo.toml ($CARGO_VERSION) does not match release version (${{ steps.get_version.outputs.version }})"
            exit 1
          fi
      
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
      
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_binaries, publish_crate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all tags and branches
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag (exclude current tag and filter out rc/pre-release versions)
          CURRENT_TAG="${{ inputs.tag || github.ref_name }}"
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$CURRENT_TAG" | grep -v "rc" | grep -v "pre" | head -1)
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          
          # Generate changelog from commits
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..${{ inputs.tag || github.ref_name }})
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${{ inputs.tag || github.ref_name }})
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: ${{ inputs.tag || github.ref_name }}
          body: |
            Release ${{ inputs.tag || github.ref_name }}
            
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
          tag_name: ${{ inputs.tag || github.ref_name }}
          files: |
            artifacts/build-*/starknet-contract-verifier-*
            artifacts/checksums/checksums.sha256
          draft: false
          prerelease: false